{"version":3,"sources":["component/compare.js","App.js","serviceWorker.js","index.js"],"names":["App","props","handleCompare","e","id","filteredArray","state","compareData","console","log","filterValue","photoData","find","data","filter","setState","push","axios","get","then","response","catch","error","d","slice","this","fetchData","className","length","map","index","key","src","url","alt","title","onClick","style","width","marginLeft","marginTop","border","marginBottom","padding","thumbnailUrl","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iTAgGeA,G,kBA1FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KA0BVC,cAAgB,SAACC,EAAGC,GAChB,IAAIC,EAAgB,EAAKC,MAAMC,YAC/BC,QAAQC,IAAIL,GACZ,IAAIM,EAAc,EAAKJ,MAAMK,UAAUC,KAAK,SAACC,GAAD,OAAUA,EAAKT,KAAOA,IAC7D,EAAKE,MAAMF,IAIZC,EAAgBA,EAAcS,OAAO,SAACD,GAAD,OAAUA,EAAKT,KAAOA,IAC3D,EAAKW,SAAL,eAAiBX,GAAK,MAJtB,EAAKW,SAAL,eAAiBX,GAAK,IACtBC,EAAcW,KAAKN,IAKvB,EAAKK,SAAS,CAAER,YAAaF,KApC7B,EAAKC,MAAQ,CACTK,UAAW,GACXJ,YAAa,IAJF,E,yEAQN,IAAD,OACGU,IAAMC,IAAI,+CAChBC,KAAK,SAAUC,GACZ,OAAOA,EAASP,OAEnBQ,MAAM,SAAUC,GACbd,QAAQC,IAAIa,KAEfH,KAAK,SAACI,GACPf,QAAQC,IAAIc,GACZ,EAAKR,SAAS,CACVJ,UAAWY,EAAEC,MAAM,EAAG,S,0CAM9BC,KAAKC,c,+BAeC,IAAD,SAC8BD,KAAKnB,MAAhCK,EADH,EACGA,UAAWJ,EADd,EACcA,YACnB,OACI,yBAAKoB,UAAU,kBACX,yBAAKA,UAAU,aAEPhB,GAAaA,EAAUiB,OAASjB,EAAUkB,IAAI,SAAChB,EAAMiB,GACjD,OACI,yBAAKH,UAAU,eAAeI,IAAKD,GAC/B,yBAAKH,UAAU,aACX,yBAAKK,IAAKnB,EAAKoB,IAAKC,IAAKrB,EAAKoB,OAElC,kCAAQpB,EAAKsB,OACb,kCAAQtB,EAAKT,IACb,kCAAQS,EAAKoB,KACb,4BAAQN,UAAW,EAAKrB,MAAMO,EAAKT,IAAM,kBAAoB,cAAegC,QAAS,SAACjC,GAClF,EAAKD,cAAcC,EAAGU,EAAKT,MAD/B,IAEK,EAAKE,MAAMO,EAAKT,IAAM,SAAW,cAIrD,MAEL,6BACKG,GAAeA,EAAYqB,OACxB,2BAAOS,MAAO,CAAEC,MAAO,MAAOC,WAAY,QAASC,UAAY,SAC3D,6BAASH,MAAO,CAAEI,OAAS,YAAaC,aAAe,OAAQC,QAAU,QAAzE,cACA,4BACI,qCACA,kCACA,mCACA,sCAEJ,+BACKpC,EAAYsB,IAAI,SAAChB,EAAMiB,GACpB,OAAO,wBAAIC,IAAKD,GACZ,4BAAI,yBAAKE,IAAKnB,EAAK+B,aAAcV,IAAKrB,EAAK+B,gBAC3C,4BAAK/B,EAAKsB,OACV,4BAAKtB,EAAKT,IACV,4BAAKS,EAAKoB,UAIf,W,GArFjBY,cCOH7C,MARf,WACE,OACE,yBAAK2B,UAAU,OACZ,kBAAC,EAAD,QCMamB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.7ed79652.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport './style.css'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            photoData: [],\n            compareData: [],\n        }\n    }\n\n    fetchData() {\n        let data = axios.get('https://jsonplaceholder.typicode.com/photos')\n            .then(function (response) {\n                return response.data;\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n        data.then((d) => {\n            console.log(d)\n            this.setState({\n                photoData: d.slice(0, 4)\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n    handleCompare = (e, id) => {\n        let filteredArray = this.state.compareData;\n        console.log(id)\n        let filterValue = this.state.photoData.find((data) => data.id === id)\n        if (!this.state[id]) {\n            this.setState({ [id]: true })\n            filteredArray.push(filterValue)\n        } else {\n            filteredArray = filteredArray.filter((data) => data.id !== id)\n            this.setState({ [id]: false })\n        }\n        this.setState({ compareData: filteredArray })\n    }\n    render() {\n        const { photoData, compareData } = this.state\n        return (\n            <div className=\"main-container\">\n                <div className=\"container\">\n                    {\n                        photoData && photoData.length ? photoData.map((data, index) => {\n                            return (\n                                <div className=\"subContainer\" key={index}>\n                                    <div className=\"image-set\">\n                                        <img src={data.url} alt={data.url} />\n                                    </div>\n                                    <span> {data.title}</span>\n                                    <span> {data.id}</span>\n                                    <span> {data.url}</span>\n                                    <button className={this.state[data.id] ? 'compare-btn-red' : 'compare-btn'} onClick={(e) => {\n                                        this.handleCompare(e, data.id)\n                                    }}> {this.state[data.id] ? 'remove' : 'Compare'}</button>\n                                </div>\n                            )\n                        })\n                   : null }\n                </div>\n                <div>\n                    {compareData && compareData.length ?\n                        <table style={{ width: '70%', marginLeft: '100px', marginTop : '50px' }}>\n                            <caption style={{ border : '2px solid', marginBottom : '10px', padding : '5px'}}>Comparison</caption>\n                            <tr>\n                                <th>Photo</th>\n                                <th>ID</th>\n                                <th>URL</th>\n                                <th>Title</th>\n                            </tr>\n                            <tbody>\n                                {compareData.map((data, index) => {\n                                    return <tr key={index}>\n                                        <td><img src={data.thumbnailUrl} alt={data.thumbnailUrl}/></td>\n                                        <td>{data.title}</td>\n                                        <td>{data.id}</td>\n                                        <td>{data.url}</td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </table> : null}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport Compare from './component/compare'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Compare/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}